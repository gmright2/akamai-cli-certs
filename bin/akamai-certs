#!/usr/bin/env ruby
require 'akamai/api/cps'
require 'gli'
require 'json'
require 'openssl'
require 'table_print'

include GLI::App

program_desc 'Manage Secure CDN certificates'
sort_help :manually
version '0.4.0'

flag [:edgerc], default_value: File.join(ENV['HOME'], '.edgerc')
flag [:section], default_value: 'default'

unless OpenSSL::X509::Name.instance_methods.include? :cn
  module OpenSSL
    module X509
      class Name
        def cn
          to_a.select { |name, _, _| name == 'CN' }.first[1]
        end
      end
    end
  end
end

unless OpenSSL::X509::Certificate.instance_methods.include? :sans
  module OpenSSL
    module X509
      class Certificate
        def sans
          san_ext = extensions.select { |e| e.oid == 'subjectAltName' }.first
          return [] if san_ext.nil?
          san_ext.value.split(', ')
        end
      end
    end
  end
end

pre do |global_options|
  @client = Akamai::API::CPS.new(edgerc: global_options[:edgerc],
    section: global_options[:section])
end

desc 'List certificates for a contract'
arg_name 'contract_id'
command :list do |c|
  c.action do |_, _, args|
    help_now!('contract_id is required') if args.empty?
    contract_id = args.shift

    puts "Fetching certificates for Contract ID #{contract_id}"
    enrollments = @client.enrollments(contract_id)
    puts

    tp enrollments,
        { ID: lambda { |e| e.location.split('/').last } },
        { cn: { display_method: :'csr.cn', width: 50 } },
        { SANs: lambda { |e| e.csr.sans.count } },
        { Expires: lambda { |e|
          c = @client.production_certificate(e.location.split('/').last)
          c.nil? ? 'unknown' : c.not_after } }
  end
end

desc 'List ciphers for all certificates on a contract'
arg_name 'contract_id'
command :ciphers do |c|
  c.action do |_, _, args|
    help_now!('contract_id is required') if args.empty?
    contract_id = args.shift

    puts "Fetching certificates for Contract ID #{contract_id}"
    enrollments = @client.enrollments(contract_id)
    puts

    tp enrollments,
        { id: lambda { |e| e.location.split('/').last } },
        { cn: { display_method: :'csr.cn', width: 50 } },
        { must_have: lambda { |e| e.networkConfiguration.mustHaveCiphers } },
        { preferred: lambda { |e| e.networkConfiguration.preferredCiphers } }
  end
end

desc 'Show detailed information for an enrollment'
arg_name 'enrollment_id'
command :info do |c|
  c.switch :staging, desc: 'Display certificate information from the staging network', negatable: false
  c.action do |_, options, args|
    help_now!('enrollment_id is required') if args.empty?
    enrollment_id = args.shift.to_i

    if options[:staging]
      env = 'staging'
      puts "Fetching staging certificate details for enrollment #{enrollment_id}"
      cert = @client.staging_certificate(enrollment_id)
    else
      env = 'production'
      puts "Fetching production certificate details for enrollment #{enrollment_id}"
      cert = @client.production_certificate(enrollment_id)
    end
    puts

    if cert.nil?
      exit_now!("Enrollment #{enrollment_id} not found, or no certificate deployed")
    end

    puts "Network:     #{env}"
    puts "Common Name: #{cert.subject.cn}"
    puts "Subject:     #{cert.subject}"
    puts "Not Before:  #{cert.not_before}"
    puts "Expires:     #{cert.not_after}"
    puts "Issuer:      #{cert.issuer}"
    puts "SANs:        #{cert.sans.count}"
    cert.sans.sort.each { |san| puts "             #{san.sub('DNS:', '')}" }
  end
end

desc 'Print the end-entity (leaf) certificate for an enrollment in PEM format'
arg_name 'enrollment_id'
command :leaf do |c|
  c.switch :staging, desc: 'Display certificate information from the staging network', negatable: false
  c.action do |_, options, args|
    help_now!('enrollment_id is required') if args.empty?
    enrollment_id = args.shift.to_i

    if options[:staging]
      puts "Fetching staging certificate for enrollment #{enrollment_id}"
      cert = @client.staging_certificate(enrollment_id)
    else
      puts "Fetching production certificate for enrollment #{enrollment_id}"
      cert = @client.production_certificate(enrollment_id)
    end
    puts

    if cert.nil?
      exit_now!("Enrollment #{enrollment_id} not found, or no certificate deployed")
    end

    puts cert
  end
end

desc 'Print the certificate and trust chain for an enrollment in PEM format'
arg_name 'enrollment_id'
command :chain do |c|
  c.switch :staging, desc: 'Display certificate information from the staging network', negatable: false
  c.action do |_, options, args|
    help_now!('enrollment_id is required') if args.empty?
    enrollment_id = args.shift.to_i

    if options[:staging]
      puts "Fetching staging certificate chain for enrollment #{enrollment_id}"
      chain = @client.staging_full_chain(enrollment_id)
    else
      puts "Fetching production certificate chain for enrollment #{enrollment_id}"
      chain = @client.production_full_chain(enrollment_id)
    end
    puts

    if chain.nil?
      exit_now!("Enrollment #{enrollment_id} not found, or no certificate deployed")
    end

    puts chain
  end
end

exit run(ARGV)
